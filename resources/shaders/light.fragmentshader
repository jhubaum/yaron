#version 330 core

// Light Properties
const vec3 ambientColor = vec3(0.1, 0.0, 0.0);
const vec3 specularColor = vec3(1.0, 1.0, 1.0);
const float shininess = 16.0;
//const float screenGamma = 2.2; // Assume the monitor is calibrated to the sRGB color space


uniform vec3 lightPos;
uniform vec3 lightColor;
uniform float lightStrength;

uniform vec3 diffuseColor;
uniform vec3 cameraPos;

// Output data
out vec3 color;

varying vec3 vertexPos_var;
varying vec3 normal_var;

void main() {
  vec3 normal = normalize(normal_var);
  vec3 lightDir = lightPos - vertexPos_var;
  float distance = length(lightDir);
  lightDir = normalize(lightDir);

  float lambert = max(dot(lightDir, normal), 0.0);
  float specular = 0.0;

  if (lambert > 0.0) {
    vec3 viewDir = normalize(cameraPos - vertexPos_var);
    vec3 halfDir = normalize(lightDir + viewDir);
    specular = pow(max(dot(halfDir, normal), 0.0), shininess);
  }
  vec3 baseColor = lightColor * lightStrength / (distance*distance);
  color = ambientColor +
          lambert * diffuseColor * baseColor +
          specular * specularColor * baseColor;
 
  // apply gamma correction (assume ambientColor, diffuseColor and specColor
  // have been linearized, i.e. have no gamma correction in them)
  // color = pow(color, vec3(1.0/screenGamma));
}